/*
 * balteca
 *
 * API for balteca
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Employee struct {
	Id string `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	Nickname string `json:"nickname,omitempty"`

	Department Department `json:"department,omitempty"`

	Position string `json:"position,omitempty"`

	Email string `json:"email,omitempty"`

	Phone string `json:"phone,omitempty"`

	Socials map[string]string `json:"socials,omitempty"`

	BossId *string `json:"boss_id,omitempty"`

	Description string `json:"description,omitempty"`

	Photo string `json:"photo,omitempty"`

	Level string `json:"level,omitempty"`

	Teams []TeamRole `json:"teams,omitempty"`

	Created string `json:"created,omitempty"`

	Working bool `json:"working,omitempty"`
}

// AssertEmployeeRequired checks if the required fields are not zero-ed
func AssertEmployeeRequired(obj Employee) error {
	if err := AssertDepartmentRequired(obj.Department); err != nil {
		return err
	}
	for _, el := range obj.Teams {
		if err := AssertTeamRoleRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseEmployeeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Employee (e.g. [][]Employee), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEmployeeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEmployee, ok := obj.(Employee)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEmployeeRequired(aEmployee)
	})
}
