/*
 * balteca
 *
 * API for balteca
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"CreateDepartment",
			strings.ToUpper("Post"),
			"/departments",
			c.CreateDepartment,
		},
		{
			"CreateEmployee",
			strings.ToUpper("Post"),
			"/employee",
			c.CreateEmployee,
		},
		{
			"CreateTeam",
			strings.ToUpper("Post"),
			"/teams",
			c.CreateTeam,
		},
		{
			"CreateVacation",
			strings.ToUpper("Post"),
			"/me/vacations",
			c.CreateVacation,
		},
		{
			"DeleteDepartment",
			strings.ToUpper("Delete"),
			"/departments/{id}",
			c.DeleteDepartment,
		},
		{
			"DeleteEmployee",
			strings.ToUpper("Delete"),
			"/employee/{id}/delete",
			c.DeleteEmployee,
		},
		{
			"DeleteTeam",
			strings.ToUpper("Delete"),
			"/teams/{id}",
			c.DeleteTeam,
		},
		{
			"FireEmployee",
			strings.ToUpper("Delete"),
			"/employee/{id}/fire",
			c.FireEmployee,
		},
		{
			"GetDepartment",
			strings.ToUpper("Get"),
			"/departments/{id}",
			c.GetDepartment,
		},
		{
			"GetDepartmentBreadcrumbs",
			strings.ToUpper("Get"),
			"/department/{id}/breadcrumbs",
			c.GetDepartmentBreadcrumbs,
		},
		{
			"GetDepartmentList",
			strings.ToUpper("Get"),
			"/departments",
			c.GetDepartmentList,
		},
		{
			"GetEmployeeByDepartment",
			strings.ToUpper("Get"),
			"/employee/department/{id}",
			c.GetEmployeeByDepartment,
		},
		{
			"GetEmployeeByID",
			strings.ToUpper("Get"),
			"/employee/id/{id}",
			c.GetEmployeeByID,
		},
		{
			"GetEmployeeByNickname",
			strings.ToUpper("Get"),
			"/employee/nickname/{nickname}",
			c.GetEmployeeByNickname,
		},
		{
			"GetEmployeeByTeam",
			strings.ToUpper("Get"),
			"/employee/team/{id}",
			c.GetEmployeeByTeam,
		},
		{
			"GetEmployeeList",
			strings.ToUpper("Get"),
			"/employee",
			c.GetEmployeeList,
		},
		{
			"GetTeam",
			strings.ToUpper("Get"),
			"/teams/{id}",
			c.GetTeam,
		},
		{
			"GetTeamList",
			strings.ToUpper("Get"),
			"/teams",
			c.GetTeamList,
		},
		{
			"GetVacationList",
			strings.ToUpper("Get"),
			"/employee/{id}/vacations",
			c.GetVacationList,
		},
		{
			"IsSubscribed",
			strings.ToUpper("Get"),
			"/employee/{id}/subscribe",
			c.IsSubscribed,
		},
		{
			"Login",
			strings.ToUpper("Post"),
			"/login",
			c.Login,
		},
		{
			"MeGet",
			strings.ToUpper("Get"),
			"/me",
			c.MeGet,
		},
		{
			"Search",
			strings.ToUpper("Get"),
			"/search",
			c.Search,
		},
		{
			"Subscribe",
			strings.ToUpper("Put"),
			"/employee/{id}/subscribe",
			c.Subscribe,
		},
		{
			"UpdateDepartment",
			strings.ToUpper("Put"),
			"/departments/{id}",
			c.UpdateDepartment,
		},
		{
			"UpdateEmployee",
			strings.ToUpper("Put"),
			"/employee/{id}",
			c.UpdateEmployee,
		},
		{
			"UpdateTeam",
			strings.ToUpper("Put"),
			"/teams/{id}",
			c.UpdateTeam,
		},
	}
}

// CreateDepartment -
func (c *DefaultApiController) CreateDepartment(w http.ResponseWriter, r *http.Request) {
	createDepartmentRequestParam := CreateDepartmentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createDepartmentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateDepartmentRequestRequired(createDepartmentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateDepartment(r.Context(), createDepartmentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateEmployee -
func (c *DefaultApiController) CreateEmployee(w http.ResponseWriter, r *http.Request) {
	createEmployeeRequestParam := CreateEmployeeRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createEmployeeRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateEmployeeRequestRequired(createEmployeeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateEmployee(r.Context(), createEmployeeRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateTeam -
func (c *DefaultApiController) CreateTeam(w http.ResponseWriter, r *http.Request) {
	createTeamRequestParam := CreateTeamRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createTeamRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateTeamRequestRequired(createTeamRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTeam(r.Context(), createTeamRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateVacation -
func (c *DefaultApiController) CreateVacation(w http.ResponseWriter, r *http.Request) {
	createVacationRequestParam := CreateVacationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createVacationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateVacationRequestRequired(createVacationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateVacation(r.Context(), createVacationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteDepartment -
func (c *DefaultApiController) DeleteDepartment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.DeleteDepartment(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteEmployee -
func (c *DefaultApiController) DeleteEmployee(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.DeleteEmployee(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteTeam -
func (c *DefaultApiController) DeleteTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.DeleteTeam(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FireEmployee -
func (c *DefaultApiController) FireEmployee(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.FireEmployee(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetDepartment -
func (c *DefaultApiController) GetDepartment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetDepartment(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetDepartmentBreadcrumbs -
func (c *DefaultApiController) GetDepartmentBreadcrumbs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetDepartmentBreadcrumbs(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetDepartmentList -
func (c *DefaultApiController) GetDepartmentList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDepartmentList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEmployeeByDepartment -
func (c *DefaultApiController) GetEmployeeByDepartment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetEmployeeByDepartment(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEmployeeByID -
func (c *DefaultApiController) GetEmployeeByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetEmployeeByID(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEmployeeByNickname -
func (c *DefaultApiController) GetEmployeeByNickname(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nicknameParam := params["nickname"]
	result, err := c.service.GetEmployeeByNickname(r.Context(), nicknameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEmployeeByTeam -
func (c *DefaultApiController) GetEmployeeByTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetEmployeeByTeam(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEmployeeList -
func (c *DefaultApiController) GetEmployeeList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetEmployeeList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTeam -
func (c *DefaultApiController) GetTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetTeam(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTeamList -
func (c *DefaultApiController) GetTeamList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTeamList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetVacationList -
func (c *DefaultApiController) GetVacationList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetVacationList(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// IsSubscribed -
func (c *DefaultApiController) IsSubscribed(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.IsSubscribed(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Login -
func (c *DefaultApiController) Login(w http.ResponseWriter, r *http.Request) {
	loginRequestParam := LoginRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginRequestRequired(loginRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Login(r.Context(), loginRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MeGet -
func (c *DefaultApiController) MeGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.MeGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Search -
func (c *DefaultApiController) Search(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	queryParam := query.Get("query")
	result, err := c.service.Search(r.Context(), queryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Subscribe -
func (c *DefaultApiController) Subscribe(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.Subscribe(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateDepartment -
func (c *DefaultApiController) UpdateDepartment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	updateDepartmentRequestParam := UpdateDepartmentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateDepartmentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateDepartmentRequestRequired(updateDepartmentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDepartment(r.Context(), idParam, updateDepartmentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateEmployee -
func (c *DefaultApiController) UpdateEmployee(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	bodyParam := Employee{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.UpdateEmployee(r.Context(), idParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateTeam -
func (c *DefaultApiController) UpdateTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	bodyParam := Team{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.UpdateTeam(r.Context(), idParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
