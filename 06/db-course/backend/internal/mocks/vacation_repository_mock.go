package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i git.iu7.bmstu.ru/iu7-kostritsky/iu7-db-course-project-2023-knyazhevaleksey-backend/internal/ports.VacationRepository -o ./internal/mocks/vacation_repository_mock.go -n VacationRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"git.iu7.bmstu.ru/iu7-kostritsky/iu7-db-course-project-2023-knyazhevaleksey-backend/internal/models"
	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// VacationRepositoryMock implements ports.VacationRepository
type VacationRepositoryMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, vac models.Vacation) (vp1 *models.Vacation, err error)
	inspectFuncCreate   func(ctx context.Context, vac models.Vacation)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mVacationRepositoryMockCreate

	funcGetList          func(ctx context.Context, id uuid.UUID) (va1 []models.Vacation, err error)
	inspectFuncGetList   func(ctx context.Context, id uuid.UUID)
	afterGetListCounter  uint64
	beforeGetListCounter uint64
	GetListMock          mVacationRepositoryMockGetList
}

// NewVacationRepositoryMock returns a mock for ports.VacationRepository
func NewVacationRepositoryMock(t minimock.Tester) *VacationRepositoryMock {
	m := &VacationRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mVacationRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*VacationRepositoryMockCreateParams{}

	m.GetListMock = mVacationRepositoryMockGetList{mock: m}
	m.GetListMock.callArgs = []*VacationRepositoryMockGetListParams{}

	return m
}

type mVacationRepositoryMockCreate struct {
	mock               *VacationRepositoryMock
	defaultExpectation *VacationRepositoryMockCreateExpectation
	expectations       []*VacationRepositoryMockCreateExpectation

	callArgs []*VacationRepositoryMockCreateParams
	mutex    sync.RWMutex
}

// VacationRepositoryMockCreateExpectation specifies expectation struct of the VacationRepository.Create
type VacationRepositoryMockCreateExpectation struct {
	mock    *VacationRepositoryMock
	params  *VacationRepositoryMockCreateParams
	results *VacationRepositoryMockCreateResults
	Counter uint64
}

// VacationRepositoryMockCreateParams contains parameters of the VacationRepository.Create
type VacationRepositoryMockCreateParams struct {
	ctx context.Context
	vac models.Vacation
}

// VacationRepositoryMockCreateResults contains results of the VacationRepository.Create
type VacationRepositoryMockCreateResults struct {
	vp1 *models.Vacation
	err error
}

// Expect sets up expected params for VacationRepository.Create
func (mmCreate *mVacationRepositoryMockCreate) Expect(ctx context.Context, vac models.Vacation) *mVacationRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("VacationRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &VacationRepositoryMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &VacationRepositoryMockCreateParams{ctx, vac}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the VacationRepository.Create
func (mmCreate *mVacationRepositoryMockCreate) Inspect(f func(ctx context.Context, vac models.Vacation)) *mVacationRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for VacationRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by VacationRepository.Create
func (mmCreate *mVacationRepositoryMockCreate) Return(vp1 *models.Vacation, err error) *VacationRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("VacationRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &VacationRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &VacationRepositoryMockCreateResults{vp1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the VacationRepository.Create method
func (mmCreate *mVacationRepositoryMockCreate) Set(f func(ctx context.Context, vac models.Vacation) (vp1 *models.Vacation, err error)) *VacationRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the VacationRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the VacationRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the VacationRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mVacationRepositoryMockCreate) When(ctx context.Context, vac models.Vacation) *VacationRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("VacationRepositoryMock.Create mock is already set by Set")
	}

	expectation := &VacationRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &VacationRepositoryMockCreateParams{ctx, vac},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up VacationRepository.Create return parameters for the expectation previously defined by the When method
func (e *VacationRepositoryMockCreateExpectation) Then(vp1 *models.Vacation, err error) *VacationRepositoryMock {
	e.results = &VacationRepositoryMockCreateResults{vp1, err}
	return e.mock
}

// Create implements ports.VacationRepository
func (mmCreate *VacationRepositoryMock) Create(ctx context.Context, vac models.Vacation) (vp1 *models.Vacation, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, vac)
	}

	mm_params := &VacationRepositoryMockCreateParams{ctx, vac}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.vp1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := VacationRepositoryMockCreateParams{ctx, vac}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("VacationRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the VacationRepositoryMock.Create")
		}
		return (*mm_results).vp1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, vac)
	}
	mmCreate.t.Fatalf("Unexpected call to VacationRepositoryMock.Create. %v %v", ctx, vac)
	return
}

// CreateAfterCounter returns a count of finished VacationRepositoryMock.Create invocations
func (mmCreate *VacationRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of VacationRepositoryMock.Create invocations
func (mmCreate *VacationRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to VacationRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mVacationRepositoryMockCreate) Calls() []*VacationRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*VacationRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *VacationRepositoryMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *VacationRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to VacationRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to VacationRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to VacationRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to VacationRepositoryMock.Create")
	}
}

type mVacationRepositoryMockGetList struct {
	mock               *VacationRepositoryMock
	defaultExpectation *VacationRepositoryMockGetListExpectation
	expectations       []*VacationRepositoryMockGetListExpectation

	callArgs []*VacationRepositoryMockGetListParams
	mutex    sync.RWMutex
}

// VacationRepositoryMockGetListExpectation specifies expectation struct of the VacationRepository.GetList
type VacationRepositoryMockGetListExpectation struct {
	mock    *VacationRepositoryMock
	params  *VacationRepositoryMockGetListParams
	results *VacationRepositoryMockGetListResults
	Counter uint64
}

// VacationRepositoryMockGetListParams contains parameters of the VacationRepository.GetList
type VacationRepositoryMockGetListParams struct {
	ctx context.Context
	id  uuid.UUID
}

// VacationRepositoryMockGetListResults contains results of the VacationRepository.GetList
type VacationRepositoryMockGetListResults struct {
	va1 []models.Vacation
	err error
}

// Expect sets up expected params for VacationRepository.GetList
func (mmGetList *mVacationRepositoryMockGetList) Expect(ctx context.Context, id uuid.UUID) *mVacationRepositoryMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("VacationRepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &VacationRepositoryMockGetListExpectation{}
	}

	mmGetList.defaultExpectation.params = &VacationRepositoryMockGetListParams{ctx, id}
	for _, e := range mmGetList.expectations {
		if minimock.Equal(e.params, mmGetList.defaultExpectation.params) {
			mmGetList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetList.defaultExpectation.params)
		}
	}

	return mmGetList
}

// Inspect accepts an inspector function that has same arguments as the VacationRepository.GetList
func (mmGetList *mVacationRepositoryMockGetList) Inspect(f func(ctx context.Context, id uuid.UUID)) *mVacationRepositoryMockGetList {
	if mmGetList.mock.inspectFuncGetList != nil {
		mmGetList.mock.t.Fatalf("Inspect function is already set for VacationRepositoryMock.GetList")
	}

	mmGetList.mock.inspectFuncGetList = f

	return mmGetList
}

// Return sets up results that will be returned by VacationRepository.GetList
func (mmGetList *mVacationRepositoryMockGetList) Return(va1 []models.Vacation, err error) *VacationRepositoryMock {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("VacationRepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &VacationRepositoryMockGetListExpectation{mock: mmGetList.mock}
	}
	mmGetList.defaultExpectation.results = &VacationRepositoryMockGetListResults{va1, err}
	return mmGetList.mock
}

// Set uses given function f to mock the VacationRepository.GetList method
func (mmGetList *mVacationRepositoryMockGetList) Set(f func(ctx context.Context, id uuid.UUID) (va1 []models.Vacation, err error)) *VacationRepositoryMock {
	if mmGetList.defaultExpectation != nil {
		mmGetList.mock.t.Fatalf("Default expectation is already set for the VacationRepository.GetList method")
	}

	if len(mmGetList.expectations) > 0 {
		mmGetList.mock.t.Fatalf("Some expectations are already set for the VacationRepository.GetList method")
	}

	mmGetList.mock.funcGetList = f
	return mmGetList.mock
}

// When sets expectation for the VacationRepository.GetList which will trigger the result defined by the following
// Then helper
func (mmGetList *mVacationRepositoryMockGetList) When(ctx context.Context, id uuid.UUID) *VacationRepositoryMockGetListExpectation {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("VacationRepositoryMock.GetList mock is already set by Set")
	}

	expectation := &VacationRepositoryMockGetListExpectation{
		mock:   mmGetList.mock,
		params: &VacationRepositoryMockGetListParams{ctx, id},
	}
	mmGetList.expectations = append(mmGetList.expectations, expectation)
	return expectation
}

// Then sets up VacationRepository.GetList return parameters for the expectation previously defined by the When method
func (e *VacationRepositoryMockGetListExpectation) Then(va1 []models.Vacation, err error) *VacationRepositoryMock {
	e.results = &VacationRepositoryMockGetListResults{va1, err}
	return e.mock
}

// GetList implements ports.VacationRepository
func (mmGetList *VacationRepositoryMock) GetList(ctx context.Context, id uuid.UUID) (va1 []models.Vacation, err error) {
	mm_atomic.AddUint64(&mmGetList.beforeGetListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetList.afterGetListCounter, 1)

	if mmGetList.inspectFuncGetList != nil {
		mmGetList.inspectFuncGetList(ctx, id)
	}

	mm_params := &VacationRepositoryMockGetListParams{ctx, id}

	// Record call args
	mmGetList.GetListMock.mutex.Lock()
	mmGetList.GetListMock.callArgs = append(mmGetList.GetListMock.callArgs, mm_params)
	mmGetList.GetListMock.mutex.Unlock()

	for _, e := range mmGetList.GetListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.va1, e.results.err
		}
	}

	if mmGetList.GetListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetList.GetListMock.defaultExpectation.Counter, 1)
		mm_want := mmGetList.GetListMock.defaultExpectation.params
		mm_got := VacationRepositoryMockGetListParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetList.t.Errorf("VacationRepositoryMock.GetList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetList.GetListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetList.t.Fatal("No results are set for the VacationRepositoryMock.GetList")
		}
		return (*mm_results).va1, (*mm_results).err
	}
	if mmGetList.funcGetList != nil {
		return mmGetList.funcGetList(ctx, id)
	}
	mmGetList.t.Fatalf("Unexpected call to VacationRepositoryMock.GetList. %v %v", ctx, id)
	return
}

// GetListAfterCounter returns a count of finished VacationRepositoryMock.GetList invocations
func (mmGetList *VacationRepositoryMock) GetListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.afterGetListCounter)
}

// GetListBeforeCounter returns a count of VacationRepositoryMock.GetList invocations
func (mmGetList *VacationRepositoryMock) GetListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.beforeGetListCounter)
}

// Calls returns a list of arguments used in each call to VacationRepositoryMock.GetList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetList *mVacationRepositoryMockGetList) Calls() []*VacationRepositoryMockGetListParams {
	mmGetList.mutex.RLock()

	argCopy := make([]*VacationRepositoryMockGetListParams, len(mmGetList.callArgs))
	copy(argCopy, mmGetList.callArgs)

	mmGetList.mutex.RUnlock()

	return argCopy
}

// MinimockGetListDone returns true if the count of the GetList invocations corresponds
// the number of defined expectations
func (m *VacationRepositoryMock) MinimockGetListDone() bool {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetListInspect logs each unmet expectation
func (m *VacationRepositoryMock) MinimockGetListInspect() {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to VacationRepositoryMock.GetList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		if m.GetListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to VacationRepositoryMock.GetList")
		} else {
			m.t.Errorf("Expected call to VacationRepositoryMock.GetList with params: %#v", *m.GetListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		m.t.Error("Expected call to VacationRepositoryMock.GetList")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *VacationRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockGetListInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *VacationRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *VacationRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetListDone()
}
